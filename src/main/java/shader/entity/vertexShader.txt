#version 400

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec2 passTextureCoords;
out vec4 passLighting;
out vec3 passSurfaceNormal;
out vec3 passSurfacePosition;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;

uniform vec3 directionalLightDirection;
uniform vec3 directionalLightAmbient;
uniform vec3 directionalLightDiffuse;
uniform vec3 directionalLightColor;

vec3 calculateDirectionalLight() {

    vec3 viewDirection = vec3(viewMatrix[1][3], viewMatrix[2][3], viewMatrix[3][3]);

    vec3 totalDiffuse = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);
    vec3 lightDir = normalize(-directionalLightDirection);

    // diffuse shading
    float diffuseFactor = max(dot(normal, lightDir), 0.0);

    // specular shading
    vec3 reflectDirection = reflect(-lightDir, normal);
    float specularFactor = pow(max(dot(viewDirection, reflectDirection), 0.0), 0);

    // combine results
    totalDiffuse  += directionalLightColor  * diffuseFactor;
    totalSpecular += directionalLightColor  * specularFactor;

    return totalDiffuse + totalSpecular;
}

void main(void){

	gl_Position = projectionMatrix * viewMatrix * transformationMatrix * vec4(position,1.0);
	passTextureCoords = textureCoords;
	passLighting = vec4(calculateDirectionalLight(), 1.0);
    passSurfaceNormal = (transformationMatrix * vec4(normal,0.0)).xyz;
    passSurfacePosition = position;

}