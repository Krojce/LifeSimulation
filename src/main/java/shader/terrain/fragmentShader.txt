#version 400

in vec4 passColor;
in vec3 passSurfaceNormal;
in vec3 passSurfacePosition;

out vec4 outColor;

uniform mat4 viewMatrix;

uniform vec3 pointLightPosition[5];
uniform vec3 pointLightAmbient[5];
uniform vec3 pointLightDiffuse[5];
uniform vec3 pointLightColor[5];
uniform vec3 pointLightAttenuation[5];

uniform vec3 spotlightPosition;
uniform vec3 spotlightDirection;
uniform vec3 spotlightColor;
uniform float spotlightCutoff;

const float pointLightPower = 1.0;
const float fogDensity = 0.001;
const vec4 fogColor = vec4(0.0, 0.0, 0.0, 1.0);
const vec4 skyColor = vec4(0.0, 0.0, 0.0, 1.0);

vec3 calculatePointLight() {

    vec3 totalDiffuse = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);
    vec3 totalAmbient = vec3(0.0);

    for(int i = 0; i < 5; i++) {
            vec3 lightDir = normalize(pointLightPosition[i] - passSurfacePosition);

            // attenuation
            float distance = length(pointLightPosition[i] - passSurfacePosition);
            float attFactor = 1.0 / (pointLightAttenuation[i].x + (pointLightAttenuation[i].y * distance) + (pointLightAttenuation[i].z * distance * distance));

            // diffuse shading
            float diffuseFactor = max(dot(passSurfaceNormal, lightDir), 0.0);

            // specular shading
            vec3 reflectDirection = reflect(-lightDir, passSurfaceNormal);
            float specularFactor = pow(max(dot(lightDir, reflectDirection), 0.0), 0);

            // combine results
            totalDiffuse  += (pointLightColor[i] * diffuseFactor * attFactor);
            totalSpecular += (pointLightColor[i] * specularFactor * attFactor);
    }
    return (totalDiffuse + totalSpecular) * pointLightPower;
}

vec3 calculateSpotLight() {

    vec3 totalDiffuse = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);

    // spotlight

    vec3 lightDirection = normalize(spotlightPosition - passSurfacePosition);

    float theta = dot(-lightDirection, normalize(spotlightDirection));
    float epsilon = spotlightCutoff - 0.5;
    float intensity = clamp((theta - 0.5) / epsilon, 0.0, 1.0);

    // diffuse shading
    float diffuseFactor = max(dot(passSurfaceNormal, lightDirection), 0.0);

    // specular shading
    vec3 reflectDirection = reflect(-lightDirection, passSurfaceNormal);
    float specularFactor = pow(max(dot(spotlightDirection, reflectDirection), 0.0), 0);

    // combine results
    totalDiffuse  += (spotlightColor * diffuseFactor );
    totalSpecular += (spotlightColor * specularFactor );

    return (totalDiffuse + totalSpecular + vec3(0.4, 0.4, 0.4)) * intensity * 10;
}

void main(void){
    float distance = gl_FragCoord.z / gl_FragCoord.w;
    float fogFactor = 1.0 /exp(distance * fogDensity);
    fogFactor = clamp(fogFactor, 0.0, 1.0);
	vec4 finalColor = mix(skyColor, passColor, fogFactor);
	outColor = vec4(calculateSpotLight(), 1.0) + vec4(calculatePointLight(), 1.0) + finalColor;
	if(fogFactor < 0.0) {
	    outColor = vec4(1 - fogFactor, 0.0, 0.0, 0.0);
	}
}