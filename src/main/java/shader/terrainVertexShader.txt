#version 400

in vec3 inPosition;
in vec3 inColor;
in vec3 inNormal;

out vec4 passColor;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;

const float density = 0.003;
const float gradient = 2;

uniform vec3 lightPosition;
uniform vec3 lightDirection;
uniform vec3 lightColor;
uniform vec3 ambientLight;

vec3 calculateLighting(){
    vec4 worldPosition = transformationMatrix * vec4(inPosition,1.0);
    vec3 surfaceNormal = normalize((transformationMatrix * vec4(inNormal, 0.0)).xyz);
	vec3 toLightVector = normalize(lightDirection - worldPosition.xyz);
    float brightness = max(dot(toLightVector, surfaceNormal), 0.2);
    return ambientLight + (brightness * lightColor);
}

void main(void){
    vec4 worldPosition = transformationMatrix * vec4(inPosition,1.0);
	gl_Position = projectionMatrix * viewMatrix * worldPosition;

    passColor = vec4(inColor * calculateLighting(), 1.0);
}
